#include "pngutils.h"
namespace spider {
    image *png_get_image_data(png_image pimage)
    {
        image *img = (image *)malloc(sizeof(image));
        memset(&img, 0, sizeof(image));
    /*    if (png_get_color_type(pimage, pimage->info_ptr) == PNG_COLOR_TYPE_RGB)
                return NULL;//abort_("[process_file] input file is PNG_COLOR_TYPE_RGB but must be PNG_COLOR_TYPE_RGBA ""(lacks the alpha channel)");

        if (png_get_color_type(pimage, pimage->info_ptr) != PNG_COLOR_TYPE_RGBA)
                return NULL; //abort_("[process_file] color_type of input file must be PNG_COLOR_TYPE_RGBA (%d) (is %d)", PNG_COLOR_TYPE_RGBA, png_get_color_type(png_ptr, info_ptr));
*/
        pixel *pixels = (pixel *)malloc(sizeof(pixel) * pimage.height * pimage.width);
        int i = 0;
        for (int y=0; y < pimage.height; y++) {
                png_byte* row = pimage.row_pointers[y];
                for (int x=0; x < pimage.width; x++) {
                        png_byte* ptr = &(row[x*4]);
                        pixel *pix = (pixel *)malloc(sizeof(pixel));
                        pix->r = ptr[0];
                        pix->g = ptr[1];
                        pix->b = ptr[3];
                 //       pixels[i] = pix;
                        i++;
                }
        }
        img->pixels = pixels;
        img->width = pimage.width;
        img->height = pimage.height;
        img->flags = 0;
        return img;
    }

    png_image png_read_file(char *file_name)
    {
        png_image image;



        char header[8];    // 8 is the maximum size that can be checked

        /* open file and test for it being a png */
        FILE *fp = fopen(file_name, "rb");
        fread(header, 1, 8, fp);


        /* initialize stuff */
        image.png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);

        if (!image.png_ptr)
               return NULL;

        image.info_ptr = png_create_info_struct(png_ptr);
        if (!image.info_ptr)
               return NULL;

        if (setjmp(png_jmpbuf(image.png_ptr)))
                return NULL;

        png_init_io(image.png_ptr, fp);
        png_set_sig_bytes(image.png_ptr, 8);

        png_read_info(image.png_ptr, info_ptr);

        png_image.width = png_get_image_width(image.png_ptr, info_ptr);
        png_image.height = png_get_image_height(image.png_ptr, info_ptr);
        png_image.color_type = png_get_color_type(image.png_ptr, info_ptr);
        png_image.bit_depth = png_get_bit_depth(image.png_ptr, info_ptr);

        png_image.number_of_passes = png_set_interlace_handling(image.png_ptr);
        png_read_update_info(image.png_ptr, info_ptr);


        /* read file */
        if (setjmp(png_jmpbuf(png_image.png_ptr)))
                return NULL;//abort_("[read_png_file] Error during read_image");

        png_image.row_pointers = (png_bytep*) malloc(sizeof(png_bytep) * image.height);
        for (y=0; y<height; y++)
                row_pointers[y] = (png_byte*) malloc(png_get_rowbytes(image.png_ptr, image.info_ptr));

        png_read_image(image.png_ptr, image.row_pointers);

        fclose(fp);
        return image;
    }
}
